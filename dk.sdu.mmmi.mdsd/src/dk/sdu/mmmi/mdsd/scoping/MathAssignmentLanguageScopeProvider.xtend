/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mmmi.mdsd.scoping

import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.MathAssignmentLanguagePackage
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Root
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.VariableDeclaration
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes

import static extension org.eclipse.emf.ecore.util.EcoreUtil.getRootContainer
import static extension org.eclipse.xtext.EcoreUtil2.getAllContainers

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathAssignmentLanguageScopeProvider extends AbstractMathAssignmentLanguageScopeProvider {
	
	val epackage = MathAssignmentLanguagePackage.eINSTANCE
	
	/**
	 * Search for local and global scope candidates of type VariableDeclaration for resolving a VariableReference.
	 * 
	 * Searching for local candidates is done bottom-up to allow shadowing / locally overwriting variables.
	 * Searching for global candidates is done from top to bottom of declarations, filtering away declarations with an 'in'.
	 */
	override getScope(EObject context, EReference reference) {
		if (reference == epackage.variableReference_Variable) {
			var localCandidates = context.getAllContainers.filter(VariableDeclaration)
			if (context.isContainedInFeature(epackage.variableDeclaration_Expression)) {
				localCandidates = localCandidates.drop(1) // if reference is contained in a declaration assignment, drop the declaration itself from the scope (guards against self references)
			}
			
			val globalCandidates = context.getRootContainer.eContents
				.takeWhile[it !== context.farthestContainer] // traverse sequentially from root until the outermost container of the expression is hit (guards against forward references)
				.filter(VariableDeclaration)
				.filter[in === null] // filter away declarations with an 'in', as that declaration is only visible in that scope
				.toList.reverse // reverse the list of candidates so the declaration closest to the reference is chosen first
			return Scopes.scopeFor(localCandidates, Scopes.scopeFor(globalCandidates))
		}
		return super.getScope(context, reference)
	}
	
	/**
	 * Recursively checks if an object is contained a feature.
	 */
	def private boolean isContainedInFeature(EObject context, EReference reference) {
		if (context.eContainmentFeature === null) {
			return false
		}
		return context.eContainmentFeature == reference || context.eContainer.isContainedInFeature(reference)
	}
	
	/**
	 * Recursively finds the object's farthest / outermost container, while still remaining in the Model container. 
	 */
	def private EObject getFarthestContainer(EObject context) {
		val container = context.eContainer
		switch container {
			Root:
				return context
			default:
				return container.getFarthestContainer
		}
	}

}
